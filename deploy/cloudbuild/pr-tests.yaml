# Cloud Build configuration for PR tests with database integration tests
# Runs both unit and integration tests using Docker Compose

steps:
# Step 1: Start test environment with Docker Compose
- name: 'docker/compose:1.29.2'
  id: 'start-test-env'
  args:
    - '-f'
    - 'docker-compose.yml'
    - '-f'
    - 'docker-compose.ci.yml'
    - '--profile'
    - 'test'
    - 'up'
    - '-d'
    - '--build'
  env:
    - 'APP_CONTAINER_NAME=ci-app-test'
    - 'POSTGRES_CONTAINER_NAME=ci-postgres-test'
    - 'POSTGRES_DB=webapp_test'

# Step 2: Run tests in the container
- name: 'gcr.io/cloud-builders/docker'
  id: 'run-tests'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      echo "Waiting for containers to be ready..."
      sleep 5
      
      echo "Running migrations..."
      docker exec ci-app-test npm run migrate:test
      
      echo "Running integration tests..."
      docker exec ci-app-test npm run test:integration
      
      echo "Running API tests..."
      docker exec ci-app-test npx jest app.test.js --coverage=false
  waitFor: ['start-test-env']

# Step 3: Clean up
- name: 'docker/compose:1.29.2'
  id: 'cleanup'
  args:
    - '-f'
    - 'docker-compose.yml'
    - '-f'
    - 'docker-compose.ci.yml'
    - '--profile'
    - 'test'
    - 'down'
    - '-v'
  waitFor: ['run-tests']


options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'  # More CPU for faster Docker Compose tests
  
timeout: 600s  # 10 minutes for full test suite including database

substitutions:
  _PROJECT_ID: u2i-tenant-webapp-nonprod
  _REGION: europe-west1
  _PR_NUMBER: ${_PR_NUMBER}