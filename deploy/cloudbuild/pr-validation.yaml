# GENERATED FILE - DO NOT EDIT MANUALLY
# This file is auto-generated by compliance-cli
# Source: internal/generate/templates/cloudbuild/pr-validation.yaml.tmpl
# To make changes, edit .compliance-cli.yml and run: compliance-cli generate

steps:
# Step 1: Docker Build Test
- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-test'
  args: [
    'build',
    '-t', 'test-image:pr-${_PR_NUMBER}',
    '--target', 'test',
    '.'
  ]
  waitFor: ['-']

# Step 2: Security & Compliance Checks
- name: 'node:18-alpine'
  id: 'security-compliance'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    echo "üîç Running Security & Compliance Checks..."
    
    # Check for hardcoded secrets (smarter version)
    echo "Checking for hardcoded secrets..."
    if find . -name "*.js" -o -name "*.json" | \
       xargs grep -l "password\|secret\|api[_-]key\|token" | \
       xargs grep -H "password\|secret\|api[_-]key\|token" | \
       grep -v "SecretManager\|secretManager\|secretClient" | \
       grep -v "process\.env\|DATABASE_PASSWORD" | \
       grep -v "require.*secret-manager" | \
       grep -v "^[^:]*:\s*//" | \
       grep -E "=.*['\"].*['\"]" | \
       grep -v "\.test\.js:" | \
       grep -v "package.*\.json:"; then
      echo "‚ùå Potential hardcoded secrets found!"
      exit 1
    fi
    echo "‚úÖ No hardcoded secrets detected"
    
    # Check compliance metadata
    if ! grep -q '"compliance":' package.json; then
      echo "‚ùå Missing compliance metadata in package.json"
      exit 1
    fi
    echo "‚úÖ Compliance metadata present"
    
    # Check for required security headers in package.json
    if ! grep -q '"iso27001":\s*true' package.json; then
      echo "‚ö†Ô∏è Warning: ISO 27001 compliance flag not set"
    fi
    if ! grep -q '"soc2-type2":\s*true' package.json; then
      echo "‚ö†Ô∏è Warning: SOC2 Type II compliance flag not set"
    fi
    if ! grep -q '"gdpr":\s*true' package.json; then
      echo "‚ö†Ô∏è Warning: GDPR compliance flag not set"
    fi
    
    echo "‚úÖ Security & Compliance checks completed"
  waitFor: ['-']

# Step 3: Container Smoke Test
- name: 'gcr.io/cloud-builders/docker'
  id: 'container-smoke-test'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    echo "üê≥ Running container smoke test..."
    
    # Build production image
    docker build -t webapp:pr-${_PR_NUMBER} .
    
    # Run container
    docker run -d -p 8080:8080 --name webapp-test webapp:pr-${_PR_NUMBER}
    
    # Wait for startup
    sleep 5
    
    # Test health endpoint
    docker run --network host alpine/curl -f http://localhost:8080/health || {
      echo "‚ùå Health check failed"
      docker logs webapp-test
      docker stop webapp-test
      exit 1
    }
    
    # Test ready endpoint
    docker run --network host alpine/curl -f http://localhost:8080/ready || {
      echo "‚ùå Ready check failed"
      docker logs webapp-test
      docker stop webapp-test
      exit 1
    }
    
    # Cleanup
    docker stop webapp-test
    docker rm webapp-test
    
    echo "‚úÖ Container smoke test passed"
  waitFor: ['docker-build-test']

# Step 4: Dependency Security Audit
- name: 'node:18-alpine'
  id: 'dependency-audit'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    echo "üîê Running dependency security audit..."
    npm ci
    npm audit --audit-level=high || {
      echo "‚ö†Ô∏è Security vulnerabilities found in dependencies"
      echo "Run 'npm audit fix' to resolve"
    }
    echo "‚úÖ Dependency audit completed"
  waitFor: ['-']

# Step 5: Summary Report
- name: 'alpine'
  id: 'summary'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    echo "========================================="
    echo "PR #${_PR_NUMBER} Validation Summary"
    echo "========================================="
    echo "‚úÖ Docker build test: PASSED"
    echo "‚úÖ Security checks: PASSED"
    echo "‚úÖ Compliance validation: PASSED"
    echo "‚úÖ Container smoke test: PASSED"
    echo "‚úÖ Dependency audit: COMPLETED"
    echo "========================================="
    echo "All validation checks completed successfully!"
  waitFor: ['container-smoke-test', 'security-compliance', 'dependency-audit']

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  
timeout: 600s

substitutions:
  _PROJECT_ID: u2i-tenant-webapp-nonprod
  _REGION: europe-west1
  _PR_NUMBER: ${_PR_NUMBER}