name: Cleanup Old Previews

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      days_old:
        description: 'Delete previews older than N days'
        required: false
        default: '7'

env:
  GCP_PROJECT: u2i-tenant-webapp
  GCP_REGION: europe-west1

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - uses: actions/checkout@v4
    
    - uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
    
    - uses: google-github-actions/setup-gcloud@v2
      with:
        install_components: 'gke-gcloud-auth-plugin'
    
    - name: Setup kubectl
      run: |
        gcloud container clusters get-credentials webapp-cluster \
          --region=${{ env.GCP_REGION }} \
          --project=${{ env.GCP_PROJECT }}
    
    - name: Cleanup Old Preview Namespaces
      run: |
        DAYS_OLD="${{ github.event.inputs.days_old || '7' }}"
        echo "ðŸ§¹ Cleaning up preview namespaces older than ${DAYS_OLD} days"
        
        # Get current timestamp
        NOW=$(date +%s)
        CUTOFF=$((NOW - (DAYS_OLD * 24 * 60 * 60)))
        
        # Find and delete old preview namespaces
        kubectl get namespaces -o json | jq -r '.items[] | 
          select(.metadata.name | startswith("webapp-preview-")) | 
          select(.metadata.name | contains("pr-")) |
          "\(.metadata.name) \(.metadata.creationTimestamp)"' | \
        while read -r NAMESPACE CREATED; do
          CREATED_TS=$(date -d "${CREATED}" +%s 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "${CREATED}" +%s)
          
          if [ "${CREATED_TS}" -lt "${CUTOFF}" ]; then
            echo "Deleting old namespace: ${NAMESPACE} (created: ${CREATED})"
            kubectl delete namespace "${NAMESPACE}" --ignore-not-found=true || true
          else
            echo "Keeping namespace: ${NAMESPACE} (created: ${CREATED})"
          fi
        done
    
    - name: Cleanup Orphaned Certificates
      run: |
        echo "ðŸ§¹ Cleaning up orphaned certificates"
        
        # List all preview certificates
        gcloud certificate-manager certificates list \
          --project=${{ env.GCP_PROJECT }} \
          --format="value(name)" | \
        grep -E "webapp-preview-cert-pr-[0-9]+" | \
        while read -r CERT_NAME; do
          # Extract PR number from certificate name
          PR_NUM=$(echo "${CERT_NAME}" | grep -oE "pr-[0-9]+" | cut -d- -f2)
          NAMESPACE="webapp-preview-pr-${PR_NUM}"
          
          # Check if namespace exists
          if ! kubectl get namespace "${NAMESPACE}" &>/dev/null; then
            echo "Deleting orphaned certificate: ${CERT_NAME}"
            
            # First, remove the certificate map entry
            ENTRY_NAME="webapp-preview-entry-pr-${PR_NUM}"
            gcloud certificate-manager maps entries delete "${ENTRY_NAME}" \
              --map="webapp-cert-map" \
              --project=${{ env.GCP_PROJECT }} \
              --quiet || true
            
            # Then delete the certificate
            gcloud certificate-manager certificates delete "${CERT_NAME}" \
              --project=${{ env.GCP_PROJECT }} \
              --quiet || true
          fi
        done
    
    - name: Summary
      run: |
        echo "âœ… Cleanup completed"
        echo ""
        echo "Remaining preview namespaces:"
        kubectl get namespaces | grep webapp-preview- || echo "None"