name: CD - Deployment Status

on:
  workflow_dispatch:
  schedule:
    # Run every hour to update deployment status
    - cron: '0 * * * *'

env:
  PROJECT_ID: u2i-tenant-webapp
  REGION: europe-west1
  PIPELINE: webapp-pipeline

jobs:
  deployment-status:
    name: Check Deployment Status
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      issues: write
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: 'cloud-deploy-sa@u2i-tenant-webapp.iam.gserviceaccount.com'
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Get deployment status
      id: status
      run: |
        echo "# 📊 Deployment Status Report"
        echo ""
        echo "**Pipeline:** webapp-staged-pipeline"
        echo "**Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        
        # Function to get stage status
        get_stage_status() {
          local STAGE=$1
          local TARGET="${STAGE}-gke"
          
          echo "## ${STAGE^^} Environment"
          
          # Get the latest successful rollout
          ROLLOUT_INFO=$(gcloud deploy rollouts list \
            --delivery-pipeline=$PIPELINE \
            --region=$REGION \
            --project=$PROJECT_ID \
            --filter="targetId=${TARGET} AND state=SUCCEEDED" \
            --sort-by=~createTime \
            --limit=1 \
            --format="value(name,createTime)")
          
          if [ -z "$ROLLOUT_INFO" ]; then
            echo "- **Status:** ❌ No successful deployment"
            echo ""
            return
          fi
          
          ROLLOUT_NAME=$(echo "$ROLLOUT_INFO" | awk '{print $1}')
          DEPLOY_TIME=$(echo "$ROLLOUT_INFO" | awk '{print $2}')
          RELEASE_NAME=$(echo "$ROLLOUT_NAME" | awk -F'/releases/' '{print $2}' | awk -F'/rollouts/' '{print $1}')
          
          # Get release details
          RELEASE_INFO=$(gcloud deploy releases describe $RELEASE_NAME \
            --delivery-pipeline=$PIPELINE \
            --region=$REGION \
            --project=$PROJECT_ID \
            --format="value(createTime,labels)")
          
          echo "- **Status:** ✅ Deployed"
          echo "- **Release:** \`$RELEASE_NAME\`"
          echo "- **Deployed at:** $DEPLOY_TIME"
          
          # Parse labels
          if [[ "$RELEASE_INFO" == *"git-sha"* ]]; then
            GIT_SHA=$(echo "$RELEASE_INFO" | grep -o "git-sha=\w*" | cut -d'=' -f2)
            echo "- **Git SHA:** \`$GIT_SHA\`"
          fi
          
          if [[ "$RELEASE_INFO" == *"version"* ]]; then
            VERSION=$(echo "$RELEASE_INFO" | grep -o "version=[^ ]*" | cut -d'=' -f2)
            echo "- **Version:** \`$VERSION\`"
          fi
          
          echo ""
        }
        
        # Check each stage
        get_stage_status "dev"
        get_stage_status "qa"
        get_stage_status "prod"
        
        # Get pending approvals
        echo "## 🔔 Pending Actions"
        
        PENDING_APPROVALS=$(gcloud deploy rollouts list \
          --delivery-pipeline=$PIPELINE \
          --region=$REGION \
          --project=$PROJECT_ID \
          --filter="approvalState=NEEDS_APPROVAL" \
          --format="table(name,targetId,createTime)")
        
        if [ -z "$PENDING_APPROVALS" ]; then
          echo "- No pending approvals"
        else
          echo "### Awaiting Approval:"
          echo "\`\`\`"
          echo "$PENDING_APPROVALS"
          echo "\`\`\`"
        fi
        
        # Save report for output
        {
          echo "# 📊 Deployment Status Report"
          echo ""
          echo "**Pipeline:** webapp-staged-pipeline"
          echo "**Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          get_stage_status "dev"
          get_stage_status "qa"
          get_stage_status "prod"
        } > status_report.md
        
        # Output for GitHub Actions summary
        cat status_report.md >> $GITHUB_STEP_SUMMARY
    
    - name: Check for deployment drift
      run: |
        echo ""
        echo "## 🔍 Deployment Drift Check"
        
        # Compare what's deployed vs what's in main
        MAIN_SHA=$(git ls-remote https://github.com/${{ github.repository }}.git main | cut -f1 | cut -c1-7)
        
        # Get dev deployment SHA
        DEV_ROLLOUT=$(gcloud deploy rollouts list \
          --delivery-pipeline=$PIPELINE \
          --region=$REGION \
          --project=$PROJECT_ID \
          --filter="targetId=dev-gke AND state=SUCCEEDED" \
          --sort-by=~createTime \
          --limit=1 \
          --format="value(name)")
        
        if [ ! -z "$DEV_ROLLOUT" ]; then
          DEV_RELEASE=$(echo "$DEV_ROLLOUT" | awk -F'/releases/' '{print $2}' | awk -F'/rollouts/' '{print $1}')
          DEV_SHA=$(gcloud deploy releases describe $DEV_RELEASE \
            --delivery-pipeline=$PIPELINE \
            --region=$REGION \
            --project=$PROJECT_ID \
            --format="value(labels)" | grep -o "git-sha=\w*" | cut -d'=' -f2)
          
          if [ "$MAIN_SHA" != "$DEV_SHA" ]; then
            echo "⚠️ **Dev environment is behind main branch**"
            echo "- Main branch: \`$MAIN_SHA\`"
            echo "- Dev deployed: \`$DEV_SHA\`"
            echo ""
            echo "Run the dev deployment workflow to update."
          else
            echo "✅ Dev environment is up to date with main branch"
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY