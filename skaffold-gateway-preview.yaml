apiVersion: skaffold/v4beta13
kind: Config
metadata:
  name: webapp-preview-deployment
build:
  artifacts:
  - image: europe-west1-docker.pkg.dev/u2i-tenant-webapp/webapp-images/webapp
    docker:
      dockerfile: Dockerfile
  googleCloudBuild:
    projectId: u2i-tenant-webapp
    region: europe-west1
  tagPolicy:
    sha256: {}
manifests:
  kustomize:
    paths:
    - k8s-clean/overlays/preview-gateway
    buildArgs:
    - --load-restrictor=LoadRestrictionsNone
deploy:
  kubectl:
    flags:
      apply: ["--server-side", "--force-conflicts"]
customActions:
- name: setup-namespace
  containers:
  - name: kubectl-setup
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    command: ["/bin/bash"]
    args:
    - "-c"
    - |
      set -ex
      echo "=== Setting up namespace and network resources ==="
      
      # Get cluster credentials
      gcloud container clusters get-credentials webapp-cluster \
        --region=europe-west1 \
        --project=u2i-tenant-webapp
      
      # Create namespace if it doesn't exist
      echo "Creating namespace ${NAMESPACE}..."
      kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f - --server-side
      
      # Download the rendered manifest
      echo "Downloading rendered manifest..."
      BUCKET="gs://u2i-tenant-webapp-deploy-artifacts"
      
      # The pipeline name in the bucket includes hash
      PIPELINE_WITH_HASH="webapp-preview-pipeline-a0f698d2aeb6418abfb81846b21d3b53"
      
      # Extract just the release name from the full path
      RELEASE_NAME=$(echo "${CLOUD_DEPLOY_RELEASE}" | awk -F'/' '{print $NF}')
      echo "Release name: ${RELEASE_NAME}"
      
      # The target is preview-gke
      TARGET_NAME="preview-gke"
      
      # Construct the full path
      MANIFEST_PATH="${BUCKET}/${PIPELINE_WITH_HASH}/${RELEASE_NAME}/${TARGET_NAME}/stable/manifest.yaml"
      
      echo "Downloading from: ${MANIFEST_PATH}"
      if gsutil cp "${MANIFEST_PATH}" rendered.yaml; then
        echo "Successfully downloaded rendered manifest"
        
        # Apply HTTPRoute and NetworkPolicy from rendered manifest
        echo "Applying HTTPRoute..."
        kubectl apply -f rendered.yaml \
          --selector="kind=HTTPRoute" \
          --namespace=${NAMESPACE} \
          --server-side || echo "No HTTPRoute found"
        
        echo "Applying NetworkPolicy..."
        kubectl apply -f rendered.yaml \
          --selector="kind=NetworkPolicy" \
          --namespace=${NAMESPACE} \
          --server-side || echo "No NetworkPolicy found"
      else
        echo "Failed to download manifest, skipping network resources"
      fi
      
      echo "=== Predeploy completed successfully ==="
  executionMode:
    local:
      useLocalImages: true
profiles:
- name: preview-all