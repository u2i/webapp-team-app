apiVersion: skaffold/v4beta13
kind: Config
metadata:
  name: webapp-preview-deployment
build:
  artifacts:
  - image: europe-west1-docker.pkg.dev/u2i-tenant-webapp/webapp-images/webapp
    docker:
      dockerfile: Dockerfile
  googleCloudBuild:
    projectId: u2i-tenant-webapp
    region: europe-west1
  tagPolicy:
    sha256: {}
manifests:
  kustomize:
    paths:
    - k8s-clean/overlays/preview-gateway-cert
    - k8s-clean/overlays/preview-gateway-infra
    - k8s-clean/overlays/preview-gateway
    buildArgs:
    - --load-restrictor=LoadRestrictionsNone
deploy:
  kubectl: {}
customActions:
- name: setup-cert-and-infra
  containers:
  - name: kubectl-setup
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    command: ["/bin/bash"]
    args:
    - "-c"
    - |
      set -ex
      echo "=== Starting predeploy for certificate and infrastructure ==="
      
      # Check current directory and contents
      echo "Current directory: $(pwd)"
      echo "Directory contents:"
      ls -la
      
      # Check Cloud Deploy environment variables
      echo "Cloud Deploy environment variables:"
      echo "CLOUD_DEPLOY_DELIVERY_PIPELINE: ${CLOUD_DEPLOY_DELIVERY_PIPELINE}"
      echo "CLOUD_DEPLOY_RELEASE: ${CLOUD_DEPLOY_RELEASE}"
      echo "CLOUD_DEPLOY_ROLLOUT: ${CLOUD_DEPLOY_ROLLOUT}"
      echo "CLOUD_DEPLOY_PHASE: ${CLOUD_DEPLOY_PHASE}"
      
      # Explore the artifact storage to find rendered manifest
      echo "Exploring artifact storage structure..."
      BUCKET_BASE="gs://u2i-tenant-webapp-deploy-artifacts"
      
      # List contents at different levels to understand structure
      echo "Listing pipeline level:"
      gsutil ls "${BUCKET_BASE}/${CLOUD_DEPLOY_DELIVERY_PIPELINE}/" | head -10 || true
      
      echo "Listing release level:"
      gsutil ls "${BUCKET_BASE}/${CLOUD_DEPLOY_DELIVERY_PIPELINE}/${CLOUD_DEPLOY_RELEASE}/" | head -10 || true
      
      echo "Listing rollout level:"
      gsutil ls "${BUCKET_BASE}/${CLOUD_DEPLOY_DELIVERY_PIPELINE}/${CLOUD_DEPLOY_RELEASE}/${CLOUD_DEPLOY_ROLLOUT}/" | head -10 || true
      
      # Try to find any rendered files
      echo "Searching for rendered files..."
      gsutil ls -r "${BUCKET_BASE}/${CLOUD_DEPLOY_DELIVERY_PIPELINE}/${CLOUD_DEPLOY_RELEASE}/" | grep -E "(rendered|manifest)" | head -20 || true
      
      # Check if there's a manifest.yaml or other common names
      for filename in rendered.yaml manifest.yaml manifests.yaml rendered-manifest.yaml; do
        echo "Trying to download ${filename}..."
        if gsutil cp "${BUCKET_BASE}/${CLOUD_DEPLOY_DELIVERY_PIPELINE}/${CLOUD_DEPLOY_RELEASE}/${CLOUD_DEPLOY_ROLLOUT}/${filename}" . 2>/dev/null; then
          echo "Successfully downloaded ${filename}"
          mv "${filename}" rendered.yaml
          break
        fi
      done
      
      if [ ! -f "rendered.yaml" ]; then
        echo "ERROR: Could not find rendered manifest in expected locations"
        echo "Please check the bucket structure above"
        exit 1
      fi
      
      # Get cluster credentials
      gcloud container clusters get-credentials webapp-cluster \
        --region=europe-west1 \
        --project=u2i-tenant-webapp
      
      echo "1. Creating namespace (from certificate resources)..."
      kubectl apply -f rendered.yaml \
        --selector=app.kubernetes.io/component=certificate,kind=Namespace \
        --server-side
      
      echo "2. Applying certificate resources..."
      kubectl apply -f rendered.yaml \
        --selector=app.kubernetes.io/component=certificate \
        --server-side --timeout=600s
      
      echo "3. Waiting for certificate to become ACTIVE..."
      kubectl wait \
        --for=jsonpath='{.status.state}'=ACTIVE \
        --timeout=10m \
        -n ${NAMESPACE} \
        certificatemanagercertificates/${CERT_NAME}
      
      echo "Certificate is ACTIVE!"
      
      echo "4. Applying infrastructure resources..."
      kubectl apply -f rendered.yaml \
        --selector=app.kubernetes.io/component=infrastructure \
        --server-side --timeout=300s
      
      echo "=== Predeploy completed successfully ==="
profiles:
- name: preview-all