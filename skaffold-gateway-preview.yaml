apiVersion: skaffold/v4beta13
kind: Config
metadata:
  name: webapp-preview-deployment
build:
  artifacts:
  - image: europe-west1-docker.pkg.dev/u2i-tenant-webapp/webapp-images/webapp
    docker:
      dockerfile: Dockerfile
  googleCloudBuild:
    projectId: u2i-tenant-webapp
    region: europe-west1
  tagPolicy:
    sha256: {}
manifests:
  kustomize:
    paths:
    - k8s-clean/overlays/preview-gateway-cert
    - k8s-clean/overlays/preview-gateway-infra
    - k8s-clean/overlays/preview-gateway
    buildArgs:
    - --load-restrictor=LoadRestrictionsNone
deploy:
  kubectl: {}
customActions:
- name: setup-cert-and-infra
  containers:
  - name: kubectl-setup
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    command: ["/bin/bash"]
    args:
    - "-c"
    - |
      set -ex
      echo "=== Starting predeploy for certificate and infrastructure ==="
      
      # Check current directory and contents
      echo "Current directory: $(pwd)"
      echo "Directory contents:"
      ls -la
      
      # Check Cloud Deploy environment variables
      echo "Cloud Deploy environment variables:"
      echo "CLOUD_DEPLOY_DELIVERY_PIPELINE: ${CLOUD_DEPLOY_DELIVERY_PIPELINE}"
      echo "CLOUD_DEPLOY_RELEASE: ${CLOUD_DEPLOY_RELEASE}"
      echo "CLOUD_DEPLOY_ROLLOUT: ${CLOUD_DEPLOY_ROLLOUT}"
      echo "CLOUD_DEPLOY_PHASE: ${CLOUD_DEPLOY_PHASE}"
      
      # Download the rendered manifest from the correct path
      echo "Downloading rendered manifest..."
      BUCKET="gs://u2i-tenant-webapp-deploy-artifacts"
      
      # The pipeline name in the bucket already includes the hash
      PIPELINE_WITH_HASH="webapp-preview-pipeline-a0f698d2aeb6418abfb81846b21d3b53"
      
      # Extract just the release name from the full path
      RELEASE_NAME=$(echo "${CLOUD_DEPLOY_RELEASE}" | awk -F'/' '{print $NF}')
      echo "Release name: ${RELEASE_NAME}"
      
      # The target is preview-gke
      TARGET_NAME="preview-gke"
      
      # Construct the full path
      MANIFEST_PATH="${BUCKET}/${PIPELINE_WITH_HASH}/${RELEASE_NAME}/${TARGET_NAME}/stable/manifest.yaml"
      
      echo "Downloading from: ${MANIFEST_PATH}"
      if gsutil cp "${MANIFEST_PATH}" rendered.yaml; then
        echo "Successfully downloaded rendered manifest"
      else
        echo "Failed to download manifest"
        exit 1
      fi
      
      # Get cluster credentials
      gcloud container clusters get-credentials webapp-cluster \
        --region=europe-west1 \
        --project=u2i-tenant-webapp
      
      # First, let's see what's in the manifest
      echo "Checking manifest contents..."
      echo "=== First 50 lines of manifest ==="
      head -50 rendered.yaml
      echo "=== Manifest summary ==="
      grep -E "^kind:|^  name:|app.kubernetes.io/component:" rendered.yaml | head -20
      
      echo "1. Creating namespace..."
      # Extract and apply just the namespace first
      kubectl apply -f rendered.yaml \
        --selector="kind=Namespace" \
        --server-side || {
        echo "Failed to apply namespace, trying direct creation..."
        kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f - --server-side
      }
      
      echo "2. Applying HTTPRoute for External DNS..."
      # Apply HTTPRoute which has External DNS annotations to create DNS records
      echo "HTTPRoute will trigger External DNS to create DNS records..."
      kubectl apply -f rendered.yaml \
        --selector="kind=HTTPRoute" \
        --server-side --timeout=300s || {
        echo "No HTTPRoute found"
      }
      
      # Wait for DNS records to be created
      echo "Waiting for DNS records to be created..."
      DOMAIN="${DOMAIN:-pr-${PR_NUMBER}.webapp.u2i.dev}"
      echo "Checking DNS for domain: ${DOMAIN}"
      
      # Give External DNS some time to process the HTTPRoute
      echo "Waiting 30 seconds for External DNS to process HTTPRoute..."
      sleep 30
      
      # Try different DNS check methods
      for i in {1..20}; do
        echo "DNS check attempt $i/20..."
        
        # Method 1: Try using getent if available
        if command -v getent >/dev/null 2>&1; then
          if getent hosts ${DOMAIN} >/dev/null 2>&1; then
            echo "DNS record found for ${DOMAIN} (using getent)"
            break
          fi
        fi
        
        # Method 2: Try using host if available
        if command -v host >/dev/null 2>&1; then
          if host ${DOMAIN} 8.8.8.8 >/dev/null 2>&1; then
            echo "DNS record found for ${DOMAIN} (using host)"
            break
          fi
        fi
        
        # Method 3: Try using dig if available
        if command -v dig >/dev/null 2>&1; then
          if dig +short ${DOMAIN} @8.8.8.8 | grep -q .; then
            echo "DNS record found for ${DOMAIN} (using dig)"
            break
          fi
        fi
        
        # Method 4: Try using Python if available
        if command -v python3 >/dev/null 2>&1; then
          if python3 -c "import socket; socket.gethostbyname('${DOMAIN}')" >/dev/null 2>&1; then
            echo "DNS record found for ${DOMAIN} (using python)"
            break
          fi
        fi
        
        if [ $i -eq 20 ]; then
          echo "Warning: Could not verify DNS record after multiple attempts"
          echo "Continuing anyway as External DNS should have created the record..."
        else
          echo "DNS not yet resolvable, waiting... (attempt $i/20)"
          sleep 10
        fi
      done
      
      echo "3. Applying certificate resources..."
      # Apply all resources with certificate label
      kubectl apply -f rendered.yaml \
        --selector="app.kubernetes.io/component=certificate" \
        --server-side --timeout=600s || {
        echo "No certificate resources found with label, applying by kind..."
        kubectl apply -f rendered.yaml \
          --selector="kind=CertificateManagerCertificate" \
          --server-side --timeout=600s
        kubectl apply -f rendered.yaml \
          --selector="kind=CertificateManagerCertificateMapEntry" \
          --server-side --timeout=600s
      }
      
      echo "4. Checking certificate status..."
      # Check if we can access certificate manager API
      echo "Testing gcloud access..."
      gcloud certificate-manager certificates list --project=u2i-tenant-webapp --limit=1 2>&1 || {
        echo "Warning: Cannot access Certificate Manager API"
        echo "This might be a permissions issue in the execution environment"
      }
      
      # Since certificate validation can take time and we might have permission issues,
      # let's use a simpler approach
      echo "Waiting for certificate to be provisioned..."
      echo "Note: Certificate provisioning typically takes 5-10 minutes"
      
      # Wait a reasonable time for cert provisioning
      # Most certs are provisioned within 5 minutes
      WAIT_TIME=300  # 5 minutes
      echo "Waiting ${WAIT_TIME} seconds for certificate provisioning..."
      
      # Check periodically but don't fail if we can't get status
      for i in $(seq 1 30); do
        echo "Certificate check $i/30 (every 10 seconds)..."
        
        # Try to check if cert exists in K8s
        if kubectl get certificatemanagercertificate ${CERT_NAME} -n ${NAMESPACE} >/dev/null 2>&1; then
          echo "Certificate resource exists in Kubernetes"
          
          # Check if it's ready
          if kubectl get certificatemanagercertificate ${CERT_NAME} -n ${NAMESPACE} -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' | grep -q "True"; then
            echo "Certificate K8s resource is Ready"
          fi
        fi
        
        if [ $i -lt 30 ]; then
          sleep 10
        fi
      done
      
      echo "Proceeding with deployment - certificate should be active or provisioning"
      
      echo "5. Applying remaining infrastructure resources..."
      kubectl apply -f rendered.yaml \
        --selector="app.kubernetes.io/component=infrastructure" \
        --server-side --timeout=300s || {
        echo "No infrastructure resources found with label, applying by kind..."
        kubectl apply -f rendered.yaml \
          --selector="kind=Service" \
          --server-side --timeout=300s
        kubectl apply -f rendered.yaml \
          --selector="kind=ConfigMap" \
          --server-side --timeout=300s
        kubectl apply -f rendered.yaml \
          --selector="kind=NetworkPolicy" \
          --server-side --timeout=300s
        kubectl apply -f rendered.yaml \
          --selector="kind=HTTPRoute" \
          --server-side --timeout=300s
      }
      
      echo "=== Predeploy completed successfully ==="
profiles:
- name: preview-all