apiVersion: skaffold/v4beta13
kind: Config
metadata:
  name: webapp-preview-deployment
build:
  artifacts:
  - image: europe-west1-docker.pkg.dev/u2i-tenant-webapp/webapp-images/webapp
    docker:
      dockerfile: Dockerfile
  googleCloudBuild:
    projectId: u2i-tenant-webapp
    region: europe-west1
  tagPolicy:
    sha256: {}
manifests:
  kustomize:
    paths:
    - k8s-clean/overlays/preview-gateway-cert
    - k8s-clean/overlays/preview-gateway-infra
    - k8s-clean/overlays/preview-gateway
    buildArgs:
    - --load-restrictor=LoadRestrictionsNone
deploy:
  kubectl: {}
customActions:
- name: setup-cert-and-infra
  containers:
  - name: kubectl-setup
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    command: ["/bin/bash"]
    args:
    - "-c"
    - |
      set -ex
      echo "=== Starting predeploy for certificate and infrastructure ==="
      
      # Check current directory and contents
      echo "Current directory: $(pwd)"
      echo "Directory contents:"
      ls -la
      
      # Check Cloud Deploy environment variables
      echo "Cloud Deploy environment variables:"
      echo "CLOUD_DEPLOY_DELIVERY_PIPELINE: ${CLOUD_DEPLOY_DELIVERY_PIPELINE}"
      echo "CLOUD_DEPLOY_RELEASE: ${CLOUD_DEPLOY_RELEASE}"
      echo "CLOUD_DEPLOY_ROLLOUT: ${CLOUD_DEPLOY_ROLLOUT}"
      echo "CLOUD_DEPLOY_PHASE: ${CLOUD_DEPLOY_PHASE}"
      
      # Try both possible bucket locations
      echo "Looking for rendered manifests..."
      
      # Try the custom artifact storage first
      BUCKET1="gs://u2i-tenant-webapp-deploy-artifacts"
      # Try the default Cloud Deploy storage location
      BUCKET2="gs://europe-west1.deploy-artifacts.u2i-tenant-webapp.appspot.com"
      
      for BUCKET in "${BUCKET1}" "${BUCKET2}"; do
        echo "Checking bucket: ${BUCKET}"
        
        # First, check what's in the release directory
        echo "Exploring ${BUCKET} structure..."
        MANIFEST_PATH="${BUCKET}/${CLOUD_DEPLOY_DELIVERY_PIPELINE}/${CLOUD_DEPLOY_RELEASE}/artifacts.json"
        
        # Download artifacts.json which contains the manifest location
        if gsutil cp "${MANIFEST_PATH}" artifacts.json 2>/dev/null; then
          echo "Found artifacts.json, extracting manifest path..."
          # Extract the rendered manifest path from artifacts.json
          RENDERED_PATH=$(cat artifacts.json | grep -o '"renderManifestPath":"[^"]*"' | cut -d'"' -f4 || true)
          
          if [ -n "${RENDERED_PATH}" ]; then
            echo "Found manifest path: ${RENDERED_PATH}"
            # Download the actual rendered manifest
            if gsutil cp "${BUCKET}/${RENDERED_PATH}" rendered.yaml 2>/dev/null; then
              echo "Successfully downloaded rendered.yaml from ${BUCKET}/${RENDERED_PATH}"
              break
            fi
          fi
        fi
        
        # If artifacts.json approach didn't work, try direct paths
        echo "Trying direct paths in ${BUCKET}..."
        for subpath in \
          "${CLOUD_DEPLOY_DELIVERY_PIPELINE}/${CLOUD_DEPLOY_RELEASE}/rendered-manifests.yaml" \
          "${CLOUD_DEPLOY_DELIVERY_PIPELINE}/${CLOUD_DEPLOY_RELEASE}/manifests/rendered.yaml" \
          "${CLOUD_DEPLOY_DELIVERY_PIPELINE}/${CLOUD_DEPLOY_RELEASE}/manifest.yaml"; do
          
          if gsutil cp "${BUCKET}/${subpath}" rendered.yaml 2>/dev/null; then
            echo "Successfully downloaded rendered.yaml from ${BUCKET}/${subpath}"
            break 2
          fi
        done
      done
      
      if [ ! -f "rendered.yaml" ]; then
        echo "ERROR: Could not find rendered manifest"
        echo "Searched in both custom and default bucket locations"
        # List what's actually there to help debug
        echo "Listing release directory contents:"
        gsutil ls -r "${BUCKET1}/${CLOUD_DEPLOY_DELIVERY_PIPELINE}/${CLOUD_DEPLOY_RELEASE}/" | head -20 || true
        exit 1
      fi
      
      # Get cluster credentials
      gcloud container clusters get-credentials webapp-cluster \
        --region=europe-west1 \
        --project=u2i-tenant-webapp
      
      echo "1. Creating namespace (from certificate resources)..."
      kubectl apply -f rendered.yaml \
        --selector=app.kubernetes.io/component=certificate,kind=Namespace \
        --server-side
      
      echo "2. Applying certificate resources..."
      kubectl apply -f rendered.yaml \
        --selector=app.kubernetes.io/component=certificate \
        --server-side --timeout=600s
      
      echo "3. Waiting for certificate to become ACTIVE..."
      kubectl wait \
        --for=jsonpath='{.status.state}'=ACTIVE \
        --timeout=10m \
        -n ${NAMESPACE} \
        certificatemanagercertificates/${CERT_NAME}
      
      echo "Certificate is ACTIVE!"
      
      echo "4. Applying infrastructure resources..."
      kubectl apply -f rendered.yaml \
        --selector=app.kubernetes.io/component=infrastructure \
        --server-side --timeout=300s
      
      echo "=== Predeploy completed successfully ==="
  executionMode:
    kubernetesCluster: {}
profiles:
- name: preview-all