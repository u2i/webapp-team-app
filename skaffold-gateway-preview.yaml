apiVersion: skaffold/v4beta13
kind: Config
metadata:
  name: webapp-preview-deployment
build:
  artifacts:
  - image: europe-west1-docker.pkg.dev/u2i-tenant-webapp/webapp-images/webapp
    docker:
      dockerfile: Dockerfile
  googleCloudBuild:
    projectId: u2i-tenant-webapp
    region: europe-west1
  tagPolicy:
    sha256: {}
manifests:
  kustomize:
    paths:
    - k8s-clean/overlays/preview-gateway-cert
    - k8s-clean/overlays/preview-gateway-infra
    - k8s-clean/overlays/preview-gateway
    buildArgs:
    - --load-restrictor=LoadRestrictionsNone
deploy:
  kubectl: {}
customActions:
- name: setup-cert-and-infra
  containers:
  - name: kubectl-setup
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    command: ["/bin/bash"]
    args:
    - "-c"
    - |
      set -ex
      echo "=== Starting predeploy for certificate and infrastructure ==="
      
      # Check current directory and contents
      echo "Current directory: $(pwd)"
      echo "Directory contents:"
      ls -la
      
      # Download rendered manifest from Cloud Storage
      # Cloud Deploy stores artifacts in: gs://ARTIFACT_STORAGE/PIPELINE/RELEASE/ROLLOUT/
      echo "Downloading rendered manifest from Cloud Storage..."
      gsutil cp gs://u2i-tenant-webapp-deploy-artifacts/${CLOUD_DEPLOY_DELIVERY_PIPELINE}/${CLOUD_DEPLOY_RELEASE}/${CLOUD_DEPLOY_ROLLOUT}/rendered.yaml . || {
        echo "Failed to download from expected path, checking bucket contents..."
        gsutil ls -r gs://u2i-tenant-webapp-deploy-artifacts/${CLOUD_DEPLOY_DELIVERY_PIPELINE}/${CLOUD_DEPLOY_RELEASE}/ | grep rendered.yaml || true
      }
      
      if [ -f "rendered.yaml" ]; then
        echo "Successfully downloaded rendered.yaml"
      else
        echo "ERROR: Could not find rendered.yaml"
        exit 1
      fi
      
      # Get cluster credentials
      gcloud container clusters get-credentials webapp-cluster \
        --region=europe-west1 \
        --project=u2i-tenant-webapp
      
      echo "1. Creating namespace (from certificate resources)..."
      kubectl apply -f rendered.yaml \
        --selector=app.kubernetes.io/component=certificate,kind=Namespace \
        --server-side
      
      echo "2. Applying certificate resources..."
      kubectl apply -f rendered.yaml \
        --selector=app.kubernetes.io/component=certificate \
        --server-side --timeout=600s
      
      echo "3. Waiting for certificate to become ACTIVE..."
      kubectl wait \
        --for=jsonpath='{.status.state}'=ACTIVE \
        --timeout=10m \
        -n ${NAMESPACE} \
        certificatemanagercertificates/${CERT_NAME}
      
      echo "Certificate is ACTIVE!"
      
      echo "4. Applying infrastructure resources..."
      kubectl apply -f rendered.yaml \
        --selector=app.kubernetes.io/component=infrastructure \
        --server-side --timeout=300s
      
      echo "=== Predeploy completed successfully ==="
profiles:
- name: preview-all