apiVersion: skaffold/v4beta13
kind: Config
metadata:
  name: webapp-preview-deployment
build:
  artifacts:
  - image: europe-west1-docker.pkg.dev/u2i-tenant-webapp/webapp-images/webapp
    docker:
      dockerfile: Dockerfile
  googleCloudBuild:
    projectId: u2i-tenant-webapp
    region: europe-west1
  tagPolicy:
    sha256: {}
manifests:
  kustomize:
    paths:
    - k8s-clean/overlays/preview-gateway-cert
    - k8s-clean/overlays/preview-gateway-infra
    - k8s-clean/overlays/preview-gateway
    buildArgs:
    - --load-restrictor=LoadRestrictionsNone
deploy:
  kubectl: {}
customActions:
- name: setup-cert-and-infra
  containers:
  - name: kubectl-setup
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    command: ["/bin/bash"]
    args:
    - "-c"
    - |
      set -ex
      echo "=== Starting predeploy for certificate and infrastructure ==="
      
      # Check current directory and contents
      echo "Current directory: $(pwd)"
      echo "Directory contents:"
      ls -la
      
      # Check Cloud Deploy environment variables
      echo "Cloud Deploy environment variables:"
      echo "CLOUD_DEPLOY_DELIVERY_PIPELINE: ${CLOUD_DEPLOY_DELIVERY_PIPELINE}"
      echo "CLOUD_DEPLOY_RELEASE: ${CLOUD_DEPLOY_RELEASE}"
      echo "CLOUD_DEPLOY_ROLLOUT: ${CLOUD_DEPLOY_ROLLOUT}"
      echo "CLOUD_DEPLOY_PHASE: ${CLOUD_DEPLOY_PHASE}"
      
      # Download the rendered manifest from the correct path
      echo "Downloading rendered manifest..."
      BUCKET="gs://u2i-tenant-webapp-deploy-artifacts"
      
      # Extract the pipeline ID from CLOUD_DEPLOY_DELIVERY_PIPELINE (format: projects/PROJECT/locations/LOCATION/deliveryPipelines/PIPELINE_NAME)
      PIPELINE_ID=$(echo "${CLOUD_DEPLOY_DELIVERY_PIPELINE}" | awk -F'/' '{print $NF}')
      echo "Pipeline ID: ${PIPELINE_ID}"
      
      # For preview deployments, the release name is the same as in CLOUD_DEPLOY_RELEASE but we need just the name part
      RELEASE_NAME=$(echo "${CLOUD_DEPLOY_RELEASE}" | awk -F'/' '{print $NF}')
      echo "Release name: ${RELEASE_NAME}"
      
      # The target is preview-gke
      TARGET_NAME="preview-gke"
      
      # Construct the full path - use a hash of the pipeline name followed by the release name
      PIPELINE_HASH=$(echo -n "${PIPELINE_ID}" | md5sum | cut -d' ' -f1)
      MANIFEST_PATH="${BUCKET}/${PIPELINE_ID}-${PIPELINE_HASH}/${RELEASE_NAME}/${TARGET_NAME}/stable/manifest.yaml"
      
      echo "Attempting to download from: ${MANIFEST_PATH}"
      if ! gsutil cp "${MANIFEST_PATH}" rendered.yaml 2>/dev/null; then
        echo "Failed with hash, trying without hash..."
        # Try without the hash (some pipelines might not use it)
        MANIFEST_PATH="${BUCKET}/${PIPELINE_ID}/${RELEASE_NAME}/${TARGET_NAME}/stable/manifest.yaml"
        echo "Attempting to download from: ${MANIFEST_PATH}"
        
        if ! gsutil cp "${MANIFEST_PATH}" rendered.yaml 2>/dev/null; then
          echo "Still failed, listing actual structure..."
          # List to see the actual structure
          echo "Listing bucket root:"
          gsutil ls "${BUCKET}/" | head -10
          echo "Searching for our release:"
          gsutil ls -r "${BUCKET}/" | grep "${RELEASE_NAME}" | head -20
          exit 1
        fi
      fi
      
      echo "Successfully downloaded rendered manifest"
      
      # Get cluster credentials
      gcloud container clusters get-credentials webapp-cluster \
        --region=europe-west1 \
        --project=u2i-tenant-webapp
      
      echo "1. Creating namespace (from certificate resources)..."
      kubectl apply -f rendered.yaml \
        --selector=app.kubernetes.io/component=certificate,kind=Namespace \
        --server-side
      
      echo "2. Applying certificate resources..."
      kubectl apply -f rendered.yaml \
        --selector=app.kubernetes.io/component=certificate \
        --server-side --timeout=600s
      
      echo "3. Waiting for certificate to become ACTIVE..."
      kubectl wait \
        --for=jsonpath='{.status.state}'=ACTIVE \
        --timeout=10m \
        -n ${NAMESPACE} \
        certificatemanagercertificates/${CERT_NAME}
      
      echo "Certificate is ACTIVE!"
      
      echo "4. Applying infrastructure resources..."
      kubectl apply -f rendered.yaml \
        --selector=app.kubernetes.io/component=infrastructure \
        --server-side --timeout=300s
      
      echo "=== Predeploy completed successfully ==="
profiles:
- name: preview-all