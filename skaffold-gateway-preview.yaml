apiVersion: skaffold/v4beta13
kind: Config
metadata:
  name: webapp-preview-deployment
build:
  artifacts:
  - image: europe-west1-docker.pkg.dev/u2i-tenant-webapp/webapp-images/webapp
    docker:
      dockerfile: Dockerfile
  googleCloudBuild:
    projectId: u2i-tenant-webapp
    region: europe-west1
  tagPolicy:
    sha256: {}
manifests:
  kustomize:
    paths:
    - k8s-clean/overlays/preview-gateway
    buildArgs:
    - --load-restrictor=LoadRestrictionsNone
deploy:
  kubectl:
    flags:
      apply: ["--server-side", "--force-conflicts"]
customActions:
- name: setup-namespace
  containers:
  - name: kubectl-setup
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    command: ["/bin/bash"]
    args:
    - "-c"
    - |
      set -ex
      echo "=== Setting up namespace and network resources ==="
      
      # Get cluster credentials
      gcloud container clusters get-credentials webapp-cluster \
        --region=europe-west1 \
        --project=u2i-tenant-webapp
      
      # Create namespace if it doesn't exist
      echo "Creating namespace ${NAMESPACE}..."
      kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f - --server-side
      
      # Apply HTTPRoute and NetworkPolicy directly
      echo "Applying HTTPRoute..."
      cat <<EOF | kubectl apply -f - --server-side
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: ${NAME_PREFIX:-preview-}webapp-route
  namespace: ${NAMESPACE}
  labels:
    app: webapp
    stage: ${STAGE}
    boundary: ${BOUNDARY}
    tier: ${TIER}
    environment: ${ENV}
  annotations:
    external-dns.alpha.kubernetes.io/hostname: "${DOMAIN}"
    external-dns.alpha.kubernetes.io/ttl: "300"
spec:
  hostnames: 
  - "${DOMAIN}"
  parentRefs:
  - name: external-gateway
    namespace: asm-gateway
  rules:
  - backendRefs:
    - name: webapp-service
      port: 80
EOF
      
      echo "Applying NetworkPolicy..."
      kubectl apply -f /workspace/k8s-clean/base/network-policy.yaml \
        --namespace=${NAMESPACE} \
        --server-side
      
      echo "=== Predeploy completed successfully ==="
  executionMode:
    local:
      useLocalImages: true
profiles:
- name: preview-all